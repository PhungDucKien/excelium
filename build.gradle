plugins {
    id 'net.researchgate.release' version '2.6.0'
}

allprojects {
    apply plugin: 'jacoco'
    
    repositories {
        mavenCentral()
    }
}

subprojects {
    group 'excelium'

    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.options.encoding = 'UTF-8'

    dependencies {
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
        compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
        compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.0'
        compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'
        compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.0'

        testCompile group: 'org.jmockit', name: 'jmockit', version: '1.39'
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: ['**/MobileExcelium.class',
                                  '**/WebExcelium.class'])
            })
        }
    }
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/MobileExcelium.class',
                              '**/WebExcelium.class'])
        })
    }
}

task "doc-server"(type: Exec) {
    workingDir './slate'
    commandLine '/usr/bin/env', 'bundle', 'exec', 'middleman', 'server'
}

task "doc-build"(type: Exec, dependsOn: [':excelium-doclet:doc-generate']) {
    workingDir './slate'
    commandLine '/usr/bin/env', 'bundle', 'exec', 'middleman', 'build'
}

task "doc-publish"(type: Exec) {
    workingDir './slate'
    commandLine './deploy.sh'
}

task build(dependsOn: [":excelium-cli:dist"]) {
}

task appendVersionDoc {
    doFirst {
        def docFile = new File("slate/source/includes/_versions.md")
        docFile.append("* [v$project.version](/excelium/v/$project.version/)\n")
    }
}

task copyVersionDoc(type: Copy) {
    from "slate/build/current"
    into "slate/source/v/$project.version"
}

task pushUntrackedDoc(type: Exec) {
    workingDir './slate'
    commandLine './deploy.sh', '--push-untracked'
}

beforeReleaseBuild.dependsOn ":excelium-common:generateSources", "appendVersionDoc", "doc-build", "copyVersionDoc", "pushUntrackedDoc"
afterReleaseBuild.dependsOn "doc-build","doc-publish"