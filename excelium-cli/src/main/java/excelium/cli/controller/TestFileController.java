/*
 * MIT License
 *
 * Copyright (c) 2018 Excelium
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package excelium.cli.controller;

import excelium.cli.Prompt;
import excelium.cli.annotation.Command;
import excelium.cli.annotation.Controller;
import excelium.cli.annotation.Injectable;
import excelium.common.FileUtil;
import excelium.common.StringUtil;
import excelium.core.reader.TestReader;
import excelium.core.reader.TestReaderFactory;
import excelium.generator.ProjectGenerator;
import excelium.model.enums.WorkbookType;
import excelium.model.project.Project;
import excelium.model.project.TestFile;

import javax.xml.bind.JAXBException;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Provides commands for controlling test files.
 *
 * @author PhungDucKien
 * @since 2018.04.13
 */
@Controller(name = "test")
public class TestFileController {

    /**
     * Project instance
     */
    @Injectable
    private Project project;

    /**
     * Test reader factory
     */
    @Injectable(ignore = {"remove"})
    private TestReaderFactory testReaderFactory;

    /**
     * Creates a test file generated by using a template.
     *
     * @throws IOException
     */
    @Command(name = "generate")
    public void generate() throws IOException {
        String generateTemplate = Prompt.promptList("Choose the template for test file generating:", new ArrayList<>(project.getTemplates().keySet()));
    }

    /**
     * Adds existing test file.
     *
     * @throws IOException
     * @throws JAXBException
     */
    @Command(name = "add")
    public void add() throws IOException, JAXBException {
        TestReader testReader = null;
        TestFile testFile = new TestFile();

        if (project.getWorkbookType() == WorkbookType.EXCEL) {
            List<String> testFilePaths = FileUtil.listFiles(project.getTestPath());
            String filePath = Prompt.promptList("What is the file path of the test file you want to add?", testFilePaths);
            String fileLocation = project.getTemplatePath().resolve(filePath).toString();
            testFile.setLocation(fileLocation);
            testReader = testReaderFactory.createReader(fileLocation);
        } else if (project.getWorkbookType() == WorkbookType.SHEETS) {
            String spreadsheetLocation = Prompt.promptInput("What is the spreadsheet ID/URL of the test file you want to add?", null);
            String spreadsheetId = StringUtil.extractSpreadsheetId(spreadsheetLocation);
            testFile.setLocation(spreadsheetId);
            testReader = testReaderFactory.createReader(spreadsheetId);
        }

        testFile.setName(testReader.getWorkbookName());

        String template = Prompt.promptList("Choose the template of the test file:", new ArrayList<>(project.getTemplates().keySet()));
        testFile.setTemplateName(template);

        Map<String, TestFile> tests = project.getTests();
        if (tests == null) {
            tests = new LinkedHashMap<>();
        }
        String testName = testReader.getWorkbookName();
        tests.put(testName, testFile);
        project.setTests(tests);

        ProjectGenerator generator = new ProjectGenerator();
        generator.updateProject(project, Paths.get("."));
    }

    /**
     * Removes test file.
     */
    @Command(name = "remove")
    public void remove() throws IOException, JAXBException, IllegalAccessException {
        String removeTestFile = Prompt.promptList("Choose the test file to remove:", new ArrayList<>(project.getTests().keySet()));
        project.getTests().remove(removeTestFile);

        ProjectGenerator generator = new ProjectGenerator();
        generator.updateProject(project, Paths.get("."));
    }
}
