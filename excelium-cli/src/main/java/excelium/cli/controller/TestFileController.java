/*
 * MIT License
 *
 * Copyright (c) 2018 Excelium
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package excelium.cli.controller;

import excelium.cli.annotation.Command;
import excelium.cli.annotation.Controller;
import excelium.cli.annotation.Injectable;
import excelium.core.reader.TestReader;
import excelium.core.reader.TestReaderFactory;
import excelium.model.project.Project;
import excelium.model.project.TestFile;

import javax.xml.bind.JAXBException;
import java.io.IOException;
import java.nio.file.Path;

import static excelium.common.Prompt.promptFileLocation;
import static excelium.common.Prompt.promptList;

/**
 * Provides commands for controlling test files.
 *
 * @author PhungDucKien
 * @since 2018.04.13
 */
@Controller(name = "test")
public class TestFileController extends BaseController {

    /**
     * Project instance
     */
    @Injectable
    private Project project;

    /**
     * Test reader factory
     */
    @Injectable(ignore = {"remove"})
    private TestReaderFactory testReaderFactory;

    /**
     * Creates a test file generated by using a template.
     *
     * @throws IOException the io exception
     */
    @Command(name = "generate")
    public void generate() throws IOException {
        String generateTemplate = promptList("Choose the template for test file generating:", project.getTemplateListChoice(false));
    }

    /**
     * Adds existing test file.
     *
     * @throws IOException   the io exception
     * @throws JAXBException the jaxb exception
     */
    @Command(name = "add")
    public void add() throws IOException, JAXBException {
        Path testPath = project.getBasePath() != null && project.getTestPath() != null ?
                project.getBasePath().resolve(project.getTestPath()) : project.getTestPath();
        String fileLocation = promptFileLocation(project.getWorkbookType(), testPath,
                "What is the file path of the test file you want to add?",
                "What is the spreadsheet ID/URL of the test file you want to add?");
        TestReader testReader = testReaderFactory.createReader(fileLocation);

        TestFile testFile = new TestFile();
        testFile.setLocation(fileLocation);
        testFile.setName(testReader.getWorkbookName());

        String template = promptList("Choose the template of the test file:", project.getTemplateListChoice(false));
        testFile.setTemplate(template);

        project.addTest(testFile);

        updateProjectFile(project);
    }

    /**
     * Removes test file.
     *
     * @throws IOException            the io exception
     * @throws JAXBException          the jaxb exception
     * @throws IllegalAccessException the illegal access exception
     */
    @Command(name = "remove")
    public void remove() throws IOException, JAXBException, IllegalAccessException {
        String removeTestFile = promptList("Choose the test file to remove:", project.getTestListChoice(true));
        if (removeTestFile.equals(TestFile.ALL)) {
            project.getTests().clear();
        } else {
            project.getTests().remove(removeTestFile);
        }

        updateProjectFile(project);
    }
}
