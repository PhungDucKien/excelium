/*
 * Licensed to the Software Freedom Conservancy (SFC) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The SFC licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import { Prompt, StringUtil } from '@excelium/common';
import { GenericTestReaderFactory } from '@excelium/core';
import { Project, TestFile } from '@excelium/model';
import { inject } from 'inversify';
import path from 'path';
import BeanFactory from '../BeanFactory';
import { action, group } from '../commander';
import BaseController from './BaseController';

/**
 * Provides commands for controlling test files.
 *
 * @author PhungDucKien
 * @since 2018.04.13
 */
@group({ name: 'test' })
export default class TestFileController extends BaseController {
  /**
   * Project instance
   */
  @inject(BeanFactory.projectProvider)
  protected projectProvider: () => Promise<Project>;

  /**
   * Test reader factory
   */
  @inject(BeanFactory.testReaderFactoryProvider)
  protected testReaderFactoryProvider: () => Promise<GenericTestReaderFactory>;

  /**
   * Creates a test file generated by using a template.
   */
  @action({ name: 'generate', options: BaseController.baseParameters })
  public async generate(): Promise<void> {
    const project = await this.projectProvider();
    const generateTemplate = await Prompt.promptList('Choose the template for test file generating:', project.getTemplateListChoice(false));
  }

  /**
   * Adds existing test file.
   */
  @action({ name: 'add', options: BaseController.baseParameters })
  public async add(): Promise<void> {
    const project = await this.projectProvider();
    const testReaderFactory = await this.testReaderFactoryProvider();
    const testPath =
      StringUtil.isNotBlank(project.basePath) && StringUtil.isNotBlank(project.testPath)
        ? path.resolve(project.basePath, project.testPath || '')
        : path.resolve(project.testPath || '');

    const fileLocation = await Prompt.promptFileLocation(
      project.workbookType,
      testPath,
      'What is the file path of the test file you want to add?',
      'What is the spreadsheet ID/URL of the test file you want to add?'
    );
    const testReader = testReaderFactory.createReader(fileLocation || '');
    const workbook = await testReader.getWorkbook();

    const testFile = new TestFile();
    testFile.location = fileLocation || '';
    testFile.name = testReader.getWorkbookName(workbook);

    const template = await Prompt.promptList('Choose the template of the test file:', project.getTemplateListChoice(false));
    testFile.template = template;

    project.addTest(testFile);

    await this.updateProjectFile(project);
  }

  /**
   * Removes test file.
   */
  @action({ name: 'remove', options: BaseController.baseParameters })
  public async remove(): Promise<void> {
    const project = await this.projectProvider();
    const removeTestFile = await Prompt.promptList('Choose the test file to remove:', project.getTestListChoice(true));
    if (removeTestFile === TestFile.ALL) {
      project.tests.clear();
    } else {
      project.tests.delete(removeTestFile);
    }

    await this.updateProjectFile(project);
  }
}
